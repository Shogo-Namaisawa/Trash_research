SurvayType %in% c("H", "I", "A4") ~ "Eye",
SurvayType %in% c("J", "K", "A3") ~ "Norm",
TRUE ~ NA_character_)
) %>%
factor(cross_data2$Illustration, levels = c("No_image", "Eye", "Norm")) %>%
#フレーズとイラストのタイプ分類が先頭列に来るよう整備
relocate(PhraseType, .after = SurvayType) %>%
relocate(Illustration, .after = PhraseType) %>%
cross_data2
cross_data2 <- cross_data %>%
mutate(
PhraseType = SurvayType,
Illustration = SurvayType) %>%
#フレーズタイプの分類
mutate(
PhraseType = case_when(
SurvayType %in% c("F", "H", "J") ~ "Normal",
SurvayType %in% c("G", "I", "K") ~ "Nudge",
SurvayType %in% c("C", "A4", "A3") ~ "Sludge",
TRUE ~ NA_character_  # 該当なしの場合
),
#イラストタイプの分類
Illustration = case_when(
SurvayType %in% c("F", "G", "C") ~ "No_image",
SurvayType %in% c("H", "I", "A4") ~ "Eye",
SurvayType %in% c("J", "K", "A3") ~ "Norm",
TRUE ~ NA_character_)
) %>%
factor(cross_data$Illustration, levels = c("No_image", "Eye", "Norm")) %>%
#フレーズとイラストのタイプ分類が先頭列に来るよう整備
relocate(PhraseType, .after = SurvayType) %>%
relocate(Illustration, .after = PhraseType) %>%
cross_data2
cross_data2 <- cross_data %>%
mutate(
PhraseType = SurvayType,
Illustration = SurvayType) %>%
#フレーズタイプの分類
mutate(
PhraseType = case_when(
SurvayType %in% c("F", "H", "J") ~ "Normal",
SurvayType %in% c("G", "I", "K") ~ "Nudge",
SurvayType %in% c("C", "A4", "A3") ~ "Sludge",
TRUE ~ NA_character_  # 該当なしの場合
),
#イラストタイプの分類
Illustration = case_when(
SurvayType %in% c("F", "G", "C") ~ "No_image",
SurvayType %in% c("H", "I", "A4") ~ "Eye",
SurvayType %in% c("J", "K", "A3") ~ "Norm",
TRUE ~ NA_character_)
) %>%
factor(cross_data$Illustration, levels = c("No_image", "Eye", "Norm")) %>%
#フレーズとイラストのタイプ分類が先頭列に来るよう整備
relocate(PhraseType, .after = SurvayType) %>%
relocate(Illustration, .after = PhraseType)
levels(cross_data$Illustration)
levels(cross_data2$Illustration)
cross_data2 <- cross_data %>%
mutate(
PhraseType = SurvayType,
Illustration = SurvayType) %>%
#フレーズタイプの分類
mutate(
PhraseType = case_when(
SurvayType %in% c("F", "H", "J") ~ "Normal",
SurvayType %in% c("G", "I", "K") ~ "Nudge",
SurvayType %in% c("C", "A4", "A3") ~ "Sludge",
TRUE ~ NA_character_  # 該当なしの場合
),
#イラストタイプの分類
Illustration = case_when(
SurvayType %in% c("F", "G", "C") ~ "No_image",
SurvayType %in% c("H", "I", "A4") ~ "Eye",
SurvayType %in% c("J", "K", "A3") ~ "Norm",
TRUE ~ NA_character_)
) %>%
factor(cross_data$Illustration, levels = c("No_image", "Eye", "Norm")) %>%
#フレーズとイラストのタイプ分類が先頭列に来るよう整備
relocate(PhraseType, .after = SurvayType) %>%
relocate(Illustration, .after = PhraseType)
cross_data2 <- cross_data %>%
mutate(
PhraseType = SurvayType,
Illustration = SurvayType) %>%
#フレーズタイプの分類
mutate(
PhraseType = case_when(
SurvayType %in% c("F", "H", "J") ~ "Normal",
SurvayType %in% c("G", "I", "K") ~ "Nudge",
SurvayType %in% c("C", "A4", "A3") ~ "Sludge",
TRUE ~ NA_character_  # 該当なしの場合
),
#イラストタイプの分類
Illustration = case_when(
SurvayType %in% c("F", "G", "C") ~ "No_image",
SurvayType %in% c("H", "I", "A4") ~ "Eye",
SurvayType %in% c("J", "K", "A3") ~ "Norm",
TRUE ~ NA_character_)
) %>%
#フレーズとイラストのタイプ分類が先頭列に来るよう整備
relocate(PhraseType, .after = SurvayType) %>%
relocate(Illustration, .after = PhraseType)
cross_data2 <-   factor(cross_data2$Illustration, levels = c("No_image", "Eye", "Norm"))
levels(cross_data2$Illustration)
cross_data2 <- cross_data %>%
mutate(
PhraseType = SurvayType,
Illustration = SurvayType) %>%
#フレーズタイプの分類
mutate(
PhraseType = case_when(
SurvayType %in% c("F", "H", "J") ~ "Normal",
SurvayType %in% c("G", "I", "K") ~ "Nudge",
SurvayType %in% c("C", "A4", "A3") ~ "Sludge",
TRUE ~ NA_character_  # 該当なしの場合
),
#イラストタイプの分類
Illustration = case_when(
SurvayType %in% c("F", "G", "C") ~ "No_image",
SurvayType %in% c("H", "I", "A4") ~ "Eye",
SurvayType %in% c("J", "K", "A3") ~ "Norm",
TRUE ~ NA_character_)
) %>%
#フレーズとイラストのタイプ分類が先頭列に来るよう整備
relocate(PhraseType, .after = SurvayType) %>%
relocate(Illustration, .after = PhraseType)
cross_data2$Illustration <- factor(cross_data2$Illustration, levels = c("No_image", "Eye", "Norm"))
graph <- ggplot(cross_data2, aes(x = SurvayType, y = PosterScore)) +
geom_point(stat = 'summary', fun.y = 'mean') +
geom_errorbar(stat = 'summary', fun.data = 'mean_se',
width=0, fun.args = list(mult = 1.96)) +
theme_bw()
graph
graph <- ggplot(cross_data2, aes(x = Illustration, y = PosterScore)) +
geom_point(stat = 'summary', fun.y = 'mean') +
geom_errorbar(stat = 'summary', fun.data = 'mean_se',
width=0, fun.args = list(mult = 1.96)) +
theme_bw()
graph
graph <- ggplot(cross_data2, aes(x = PhraseType, y = PosterScore)) +
geom_point(stat = 'summary', fun.y = 'mean') +
geom_errorbar(stat = 'summary', fun.data = 'mean_se',
width=0, fun.args = list(mult = 1.96)) +
theme_bw()
graph
library(ggplot2)
graph <- ggplot(cross_data2, aes(x = SurvayType, y = PosterScore)) +
# 平均を表示
geom_point(stat = 'summary', fun = mean) +
# 95%信頼区間のエラーバーを表示
geom_errorbar(stat = 'summary', fun.data = mean_se,
width = 0, fun.args = list(mult = 1.96)) +
# x=50の位置に赤くて太い線を追加
geom_hline(yintercept = 50, color = "red", size = 1, alpha = 0.3) +
# 9つのグラフを分けて表示
facet_grid(PhraseType ~ Illustration) +
# グラフのテーマ設定
theme_bw()
graph
Score_model <- lm(PosterScore ~ PhraseType + Illustration + Age + Sex + Awareness_Tra + Awareness_Env, cross_data2)
summary(Score_model)
Score_model2 <- lm(PosterScore ~ PhraseType * Illustration + Age + Sex + Awareness_Tra + Awareness_Env, cross_data2)
summary(Score_model2)
Score_model2 <- lm(PosterScore ~ PhraseType * Illustration + Age + Sex + Awareness_Tra + Awareness_Env, cross_data2)
summary(Score_model2)
cross_data2 <- cross_data %>%
mutate(
PhraseType = SurvayType,
Illustration = SurvayType) %>%
#フレーズタイプの分類
mutate(
PhraseType = case_when(
SurvayType %in% c("F", "H", "J") ~ "Normal",
SurvayType %in% c("G", "I", "K") ~ "Nudge",
SurvayType %in% c("C", "A4", "A3") ~ "Sludge",
TRUE ~ NA_character_  # 該当なしの場合
),
#イラストタイプの分類
Illustration = case_when(
SurvayType %in% c("F", "G", "C") ~ "No_image",
SurvayType %in% c("H", "I", "A4") ~ "Eye",
SurvayType %in% c("J", "K", "A3") ~ "Norm",
TRUE ~ NA_character_)
) %>%
#フレーズとイラストのタイプ分類が先頭列に来るよう整備
relocate(PhraseType, .after = SurvayType) %>%
relocate(Illustration, .after = PhraseType)
cross_data2$PhraseType <- factor(cross_data2$PhraseType, levels = c("Normal", "Nudge", "Sludge"))
cross_data2$Illustration <- factor(cross_data2$Illustration, levels = c("No_image", "Eye", "Norm"))
cross_data2 <- cross_data %>%
mutate(
PhraseType = SurvayType,
Illustration = SurvayType) %>%
#フレーズタイプの分類
mutate(
PhraseType = case_when(
SurvayType %in% c("F", "H", "J") ~ "Normal",
SurvayType %in% c("G", "I", "K") ~ "Nudge",
SurvayType %in% c("C", "A4", "A3") ~ "Sludge",
TRUE ~ NA_character_  # 該当なしの場合
),
#イラストタイプの分類
Illustration = case_when(
SurvayType %in% c("F", "G", "C") ~ "No_image",
SurvayType %in% c("H", "I", "A4") ~ "Eye",
SurvayType %in% c("J", "K", "A3") ~ "Norm",
TRUE ~ NA_character_)
) %>%
#フレーズとイラストのタイプ分類が先頭列に来るよう整備
relocate(PhraseType, .after = SurvayType) %>%
relocate(Illustration, .after = PhraseType)
# F案（フレーズがnormal, イラストがNo_image）がInterceptになるように調整
cross_data2$PhraseType <- factor(cross_data2$PhraseType, levels = c("Normal", "Nudge", "Sludge"))
cross_data2$Illustration <- factor(cross_data2$Illustration, levels = c("No_image", "Eye", "Norm"))
Eye_Illust_data <- AllData %>%
# 目のイラストを比較するために必要なデータのみ抽出
filter(SurvayType %in% c("C", "A1","A2","A4"))
Eye_Illust_data <- Eye_Illust_data %>%
mutate(SurvayType = replace(SurvayType, SurvayType == "C", "絵なし")) %>%
mutate(SurvayType = replace(SurvayType, SurvayType == "A1", "複雑な目")) %>%
mutate(SurvayType = replace(SurvayType, SurvayType == "A2", "女性の目")) %>%
mutate(SurvayType = replace(SurvayType, SurvayType == "A4", "簡単な目"))
# C案（イラストがNo_image）がInterceptになるように調整
Eye_Illust_data$SurvayType <- factor(Eye_Illust_data$SurvayType, levels = c("絵なし", "複雑な目", "女性の目", "簡単な目"))
Design_mono <- Data %>%
filter(SurvayType == "B1") %>%
pull(PosterScore)
Design_color <- Data %>%
filter(SurvayType == "E") %>%
pull(PosterScore)
Design_mono
Design_color
library(tidyverse)
library(ggplotgui)#ggplot_shiny(exdataset)をコンソールに打ち込んで実行する
library(GGally)
library(plotly)
library(broom)        # tidy() でデータ整形
library(knitr)        # kable() で表を出力
library(kableExtra)   # kable() のHTML拡張
library(sjPlot)
cross_data2$PhraseType <- factor(cross_data2$PhraseType, levels = c("Normal", "Nudge", "Sludge"))
cross_data2$Illustration <- factor(cross_data2$Illustration, levels = c("Norm", "Eye", "No_image"))
Score_model_int1 <- lm(PosterScore ~ PhraseType * Illustration, cross_data2) #モデル（共変量なし)
Score_model_int2 <- lm(PosterScore ~ PhraseType * Illustration + Age + Sex + Awareness_Tra + Awareness_Env, cross_data2)#モデル（共変量あり)
tab_model(Score_model_int1, Score_model_int2)
anova_result(Score_model_noint1)
anova(Score_model_noint1)
Score_model_noint1 <- lm(PosterScore ~ PhraseType + Illustration, cross_data2)#共変量なし
Score_model_noint2 <- lm(PosterScore ~ PhraseType + Illustration + Age + Sex + Awareness_Tra + Awareness_Env, cross_data2)#共変量あり
tab_model(Score_model_noint1, Score_model_noint2)
tab_model(Score_model_noint1, Score_model_noint2)
anova(Score_model_noint1)
Score_model_int1 <- lm(PosterScore ~ PhraseType * Illustration, cross_data2) #モデル（共変量なし)
Score_model_int2 <- lm(PosterScore ~ PhraseType * Illustration + Age + Sex + Awareness_Tra + Awareness_Env, cross_data2)#モデル（共変量あり)
anova(Score_model_int1)
anova(Score_model_noint1)
library(tidyverse)
library(ggplotgui)#ggplot_shiny(exdataset)をコンソールに打ち込んで実行する
library(GGally)
library(plotly)
library(broom)        # tidy() でデータ整形
library(knitr)        # kable() で表を出力
library(kableExtra)   # kable() のHTML拡張
library(sjPlot)
Data <- read_csv("../trash_data/AllData_trash.csv")
#元々使わない３つの列は削除
AllData <- Data %>%
select(-ChooseHigh_Phrases1, -ChooseHigh_Phrases2, -ChooseHigh_Phrases3) %>%
filter(SurvayType != "B1")
summary_by_survay <- AllData %>%
#ポスター案ごとのグループ化
group_by(SurvayType) %>%
#ポスター案別のポスタースコア平均
summarise(Survay_rate = mean(PosterScore),
# 年代と性別の欠損値カウント
Age_other_count = sum(Age == "other"),
Sex_other_count = sum(Sex == "other"),
#ポスター案ごとのサンプル数
count = n())
summary_by_survay
Eye_Illust_data <- AllData %>%
# 目のイラストを比較するために必要なデータのみ抽出
filter(SurvayType %in% c("C", "A1","A2","A4"))
Eye_Illust_data <- Eye_Illust_data %>%
mutate(SurvayType = replace(SurvayType, SurvayType == "C", "絵なし")) %>%
mutate(SurvayType = replace(SurvayType, SurvayType == "A1", "複雑な目")) %>%
mutate(SurvayType = replace(SurvayType, SurvayType == "A2", "女性の目")) %>%
mutate(SurvayType = replace(SurvayType, SurvayType == "A4", "簡単な目"))
# C案（イラストがNo_image）がInterceptになるように調整
Eye_Illust_data$SurvayType <- factor(Eye_Illust_data$SurvayType, levels = c("絵なし", "複雑な目", "女性の目", "簡単な目"))
Eye_Illust_model <- lm(PosterScore ~ SurvayType, Eye_Illust_data)
Eye_Illust_model2 <- lm(PosterScore ~ SurvayType + Age + Sex + Awareness_Tra + Awareness_Env, Eye_Illust_data)
# The code below will generate the graph:
graph <- ggplot(Eye_Illust_model, aes(x = SurvayType, y = PosterScore)) +
geom_point(stat = 'summary', fun.y = 'mean') +
geom_errorbar(stat = 'summary', fun.data = 'mean_se',
width=0, fun.args = list(mult = 1.96)) +
theme_bw(base_family = "HiraKakuPro-W3")
graph
summary(Eye_Illust_model)
summary(Eye_Illust_model2)
tab_model(Eye_Illust_model, Eye_Illust_model2)
# ANOVAの実行例 from ChatGPT
anova_result <- anova(Eye_Illust_model) %>%
tidy()
# ANOVA結果をHTMLテーブルで出力
anova_result %>%
kable(format = "html", caption = "ANOVA Results") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
# ANOVAの実行例 from ChatGPT
anova_result <- anova(Eye_Illust_model2) %>%
tidy()
# ANOVA結果をHTMLテーブルで出力
anova_result %>%
kable(format = "html", caption = "ANOVA Results") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
cross_data <- AllData %>%
# イラストとフレーズを3*3で比較するために必要なデータのみ抽出
filter(SurvayType %in% c("F","G","C","H","I","A4","J","K","A3"))
cross_data2 <- cross_data %>%
mutate(
PhraseType = SurvayType,
Illustration = SurvayType) %>%
#フレーズタイプの分類
mutate(
PhraseType = case_when(
SurvayType %in% c("F", "H", "J") ~ "Normal",
SurvayType %in% c("G", "I", "K") ~ "Nudge",
SurvayType %in% c("C", "A4", "A3") ~ "Sludge",
TRUE ~ NA_character_  # 該当なしの場合
),
#イラストタイプの分類
Illustration = case_when(
SurvayType %in% c("F", "G", "C") ~ "No_image",
SurvayType %in% c("H", "I", "A4") ~ "Eye",
SurvayType %in% c("J", "K", "A3") ~ "Norm",
TRUE ~ NA_character_)
) %>%
#フレーズとイラストのタイプ分類が先頭列に来るよう整備
relocate(PhraseType, .after = SurvayType) %>%
relocate(Illustration, .after = PhraseType)
# F案（フレーズがnormal, イラストがNo_image）がInterceptになるように調整
cross_data2$PhraseType <- factor(cross_data2$PhraseType, levels = c("Normal", "Nudge", "Sludge"))
cross_data2$Illustration <- factor(cross_data2$Illustration, levels = c("No_image", "Eye", "Norm"))
graph <- ggplot(cross_data2, aes(x = SurvayType, y = PosterScore)) +
geom_point(stat = 'summary', fun.y = 'mean') +
geom_errorbar(stat = 'summary', fun.data = 'mean_se',
width=0, fun.args = list(mult = 1.96)) +
theme_bw()
graph
graph <- ggplot(cross_data2, aes(x = Illustration, y = PosterScore)) +
geom_point(stat = 'summary', fun.y = 'mean') +
geom_errorbar(stat = 'summary', fun.data = 'mean_se',
width=0, fun.args = list(mult = 1.96)) +
theme_bw()
graph
graph <- ggplot(cross_data2, aes(x = PhraseType, y = PosterScore)) +
geom_point(stat = 'summary', fun.y = 'mean') +
geom_errorbar(stat = 'summary', fun.data = 'mean_se',
width=0, fun.args = list(mult = 1.96)) +
theme_bw()
graph
library(ggplot2)
graph <- ggplot(cross_data2, aes(x = SurvayType, y = PosterScore)) +
# 平均を表示
geom_point(stat = 'summary', fun = mean) +
# 95%信頼区間のエラーバーを表示
geom_errorbar(stat = 'summary', fun.data = mean_se,
width = 0, fun.args = list(mult = 1.96)) +
# x=50の位置に赤くて太い線を追加
geom_hline(yintercept = 50, color = "red", size = 1, alpha = 0.3) +
# 9つのグラフを分けて表示
facet_grid(PhraseType ~ Illustration) +
# グラフのテーマ設定
theme_bw()
graph
Score_model_noint1 <- lm(PosterScore ~ PhraseType + Illustration, cross_data2)#共変量なし
Score_model_noint2 <- lm(PosterScore ~ PhraseType + Illustration + Age + Sex + Awareness_Tra + Awareness_Env, cross_data2)#共変量あり
tab_model(Score_model_noint1, Score_model_noint2)
anova(Score_model_noint1)
Score_model_int1 <- lm(PosterScore ~ PhraseType * Illustration, cross_data2) #モデル（共変量なし)
Score_model_int2 <- lm(PosterScore ~ PhraseType * Illustration + Age + Sex + Awareness_Tra + Awareness_Env, cross_data2)#モデル（共変量あり)
tab_model(Score_model_int1, Score_model_int2)
anova(Score_model_int1)
cross_data2$PhraseType <- factor(cross_data2$PhraseType, levels = c("Normal", "Nudge", "Sludge"))
cross_data2$Illustration <- factor(cross_data2$Illustration, levels = c("Norm", "Eye", "No_image"))
Score_model_int1 <- lm(PosterScore ~ PhraseType * Illustration, cross_data2) #モデル（共変量なし)
Score_model_int2 <- lm(PosterScore ~ PhraseType * Illustration + Age + Sex + Awareness_Tra + Awareness_Env, cross_data2)#モデル（共変量あり)
tab_model(Score_model_int1, Score_model_int2)
comparison_data <- AllData %>%
# イラストとフレーズを3*3で比較するために必要なデータのみ抽出
filter(SurvayType != "L")
comparison_data
graph <- ggplot(comparison_data, aes(x = SurvayType, y = PosterScore)) +
geom_point(stat = 'summary', fun.y = 'mean') +
geom_errorbar(stat = 'summary', fun.data = 'mean_se',
width=0, fun.args = list(mult = 1.96)) +
theme_bw()
graph
comp_model <- lm(PosterScore ~ SurvayType, comparison_data)
tab_model(comp_model)
Design_mono <- Data %>%
filter(SurvayType == "B1") %>%
pull(PosterScore)
Design_color <- Data %>%
filter(SurvayType == "E") %>%
pull(PosterScore)
Design_mono
Design_color
Design_ttest <- t.test(Design_mono, Design_color, ver.equal = F)
Design_ttest
# 昇順のデータ
Form_asc <- AllData %>%
filter(SurvayType == "A1") %>%
pull(PosterScore)
# 降順のデータ
Form_desc <- AllData %>%
filter(SurvayType == "L") %>%
pull(PosterScore)
library(broom)
sec_desc_ttest <- t.test(Form_desc, Form_asc) %>%
tidy()
sec_desc_ttest
primacy_effect <- cbind(Form_asc,Form_desc)
# The code below will generate the graph:
graph <- ggplot(Eye_Illust_model, aes(x = SurvayType, y = PosterScore)) +
geom_point(stat = 'summary', fun.y = 'mean') +
geom_errorbar(stat = 'summary', fun.data = 'mean_se',
width=0, fun.args = list(mult = 1.96)) +
theme_bw() # base_family = "HiraKakuPro-W3"
graph
cross_data2$SurvayType <- factor(cross_data2$SurvayType, levels = c("H","F","G","C","I","A4","J","K","A3"))
library(tidyverse)
library(ggplotgui)#ggplot_shiny(exdataset)をコンソールに打ち込んで実行する
library(GGally)
library(plotly)
library(broom)        # tidy() でデータ整形
library(knitr)        # kable() で表を出力
library(kableExtra)   # kable() のHTML拡張
library(sjPlot)
#データ読み込み
Data <- read_csv("../trash_data/AllData_trash.csv")
#元々使わない３つの列は削除
AllData <- Data %>%
select(-...1, -ChooseHigh_Phrases1, -ChooseHigh_Phrases2, -ChooseHigh_Phrases3) %>%
filter(SurvayType != "B1")
Eye_Illust_data <- AllData %>%
# 目のイラストを比較するために必要なデータのみ抽出
filter(SurvayType %in% c("C", "A1","A2","A4"))
Eye_Illust_data <- Eye_Illust_data %>%
mutate(SurvayType = replace(SurvayType, SurvayType == "C", "絵なし")) %>%
mutate(SurvayType = replace(SurvayType, SurvayType == "A1", "複雑な目")) %>%
mutate(SurvayType = replace(SurvayType, SurvayType == "A2", "女性の目")) %>%
mutate(SurvayType = replace(SurvayType, SurvayType == "A4", "簡単な目"))
# C案（イラストがNo_image）がInterceptになるように調整
Eye_Illust_data$SurvayType <- factor(Eye_Illust_data$SurvayType, levels = c("絵なし", "女性の目", "簡単な目", "複雑な目"))
a <- Eye_Illust_data %>%
summarise(Survay_rate = mean(PosterScore))
a
summary_by_survay <- Eye_Illust_data %>%
#ポスター案ごとのグループ化
group_by(SurvayType) %>%
#ポスター案別のポスタースコア平均
summarise(Survay_rate = mean(PosterScore),
#年代のカウント
男 = sum(Sex == "male"),
女 = sum(Sex == "female"),
その他 = sum(Sex == "other"),
#性別のカウント
Age_10s_count = sum(Age == "10dai"),
Age_20s_count = sum(Age == "20dai"),
Age_30s_count = sum(Age == "30dai"),
Age_40s_count = sum(Age == "40dai"),
Age_50s_count = sum(Age == "50dai"),
Age_60s_count = sum(Age == "60dai"),
Age_70s_count = sum(Age == "70dai"),
Age_other_count = sum(Age == "other"),
#ポスター案ごとのサンプル数
count = n())
summary_by_survay
library(knitr)
# 表形式で表示
# この出力結果をエクセルにぶっぱなす！
kable(summary_by_survay)
# skimrパッケージをインストール・読み込み
library(skimr)
# skim関数を使用
skim(Eye_Illust_data)
library(psych)
describeBy(Eye_Illust_data, group = Eye_Illust_data$SurvayType)
#SurvayTypeごとの正規性検定
tapply(Eye_Illust_data$PosterScore, Eye_Illust_data$SurvayType, shapiro.test)
#install.packages("car")  # 初回のみ
library(car) #等分散性の検定(Levene's test)
# ルビーンの検定の実施
levene_result <- leveneTest(Eye_Illust_data$PosterScore ~ Eye_Illust_data$SurvayType, Eye_Illust_data)
print(levene_result)
# クラスカル・ウォリス検定の実施
kruskal_result <- kruskal.test(Eye_Illust_data$PosterScore ~ Eye_Illust_data$SurvayType)
# 結果の表示
print(kruskal_result)
pairwise.wilcox.test(x = Eye_Illust_data$PosterScore, g=Eye_Illust_data$SurvayType, paired=F, p.adjust.method="holm")#ほるむに変える
library(table1)
# 基準メッセージを除外
filtered_data1 <- subset(cross_data2, PhraseType != "基準メッセージ")
library(table1)
# 基準メッセージを除外
filtered_data1 <- subset(cross_data2, PhraseType != "基準メッセージ")
library(table1)
# 基準メッセージを除外
filtered_data1 <- subset(cross_data2, PhraseType == "基準メッセージ")
